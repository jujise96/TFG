@model Juego

@{
    ViewData["Title"] = Model.Nombre;
}

<div class="text-center">
    <h1 class="display-4">Bienvenido a @Model.Nombre</h1>
    <p>Consulta la información del juego y accede a sus contenidos.</p>
    @if (User.Identity.IsAuthenticated)
    {
        @if (User.IsInRole("Admin"))
        {
            <form method="post" asp-controller="Home" asp-action="ModificarElemento" asp-route-tipo="Juego" asp-route-idelemento=@Model.Id>
                <button type="submit" class="btn btn-outline-secondary btn-sm">Modificar juego: @Model.Nombre</button>
            </form>
        }
    }
</div>

<div class="container mt-4">
    <h2>Información del Juego</h2>
    <ul class="list-unstyled">
        <li><strong>Nombre:</strong> @Model.Nombre</li>
        <li><strong>IdElem:</strong> @Model.IdElem</li>
        <li><strong>Descripción:</strong> @Model.Descripcion</li>
    </ul>

    <h2>Secciones disponibles</h2>
    <ul class="list-unstyled">
        <li>
            <a asp-controller="Home" asp-action="Misiones" asp-route-id="@Model.Id">Ver Misiones</a>
        </li>
        <li>
            <a asp-controller="Home" asp-action="Items" asp-route-id="@Model.Id">Ver Ítems</a>
        </li>
        <li>
            <a asp-controller="Home" asp-action="Trucos" asp-route-id="@Model.Id">Ver Truco</a>
        </li>
    </ul>
</div>

<div id="seccion-de-comentarios">
    @* Inicialmente vacío o con un spinner de carga. Los comentarios se cargarán vía JS. *@
    @* @await Html.PartialAsync("../Comentario/CajaComentarios/_CajaDeComentarios", new TFG.Models.CajaDeComentariosViewModel { TipoEntidad = "Juego", EntidadId = Model.Id }) *@
    <p>Cargando comentarios...</p>
</div>

@section Scripts {
    @* Esto es importante para que el AntiForgeryToken esté disponible en el DOM cuando se necesite *@
    @Html.AntiForgeryToken()

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var tipoEntidad = "Juego";
            var entidadId = @Model.Id;
            var comentariosDiv = document.getElementById('seccion-de-comentarios');

            function getAntiForgeryToken() {
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (tokenInput) {
                    return tokenInput.value;
                }
                console.error("No se encontró el AntiForgeryToken en el DOM.");
                return null;
            }

            // Función para inicializar los event listeners después de cargar/recargar comentarios
            function inicializarEventListeners() {
                // Eliminar el listener existente para evitar duplicados si se llama varias veces
                // Es mejor adjuntar el listener directamente al #seccion-de-comentarios y usar delegación
                // como ya lo estás haciendo con handleComentariosDivClick.
                // Asegúrate de que handleComentariosDivClick solo se adjunte una vez al DOMContentLoaded.
                // Si la función 'inicializarEventListeners' se llama después de cada AJAX,
                // entonces 'handleComentariosDivClick' ya está bien para los clics en elementos
                // que se añaden dinámicamente.
                // Sin embargo, los listeners para el botón de 'nuevo comentario' deben ser re-adjuntados
                // si el formulario se reemplaza.

                // Remover y añadir el listener principal de delegación si es necesario,
                // aunque si comentariosDiv.innerHTML se reemplaza, el listener original se perdería
                // y se tendría que re-adjuntar. La mejor práctica es adjuntarlo una sola vez en DOMContentLoaded.
                // No lo remuevas y añadas aquí a menos que el propio 'comentariosDiv' se reemplace.
                // Dado que el 'comentariosDiv' es un div que se mantiene y solo su innerHTML cambia,
                // el listener en él debería persistir.
                // Así que, el handleComentariosDivClick está bien.

                // Re-adjuntar event listener para el botón de nuevo comentario si el HTML se recargó
                var enviarBtnNuevoComentario = comentariosDiv.querySelector('#formNuevoComentario button[type="button"]');
                if (enviarBtnNuevoComentario) {
                    // Remover para evitar duplicados si esta función se llama varias veces por recarga
                    enviarBtnNuevoComentario.removeEventListener('click', enviarComentario);
                    enviarBtnNuevoComentario.addEventListener('click', enviarComentario);
                } else {
                    console.warn('No se encontró el botón de enviar nuevo comentario después de la carga. Esto es esperado si el usuario no está autenticado.');
                }
            }

            // Nueva función para cargar los comentarios (se llamará después de crear/eliminar)
            async function cargarComentarios() {
                try {
                    const response = await fetch(`/Comentario/MostrarComentarios?tipoEntidad=${tipoEntidad}&entidadId=${entidadId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.text();
                    comentariosDiv.innerHTML = data;
                    inicializarEventListeners(); // Volver a inicializar listeners para los nuevos elementos
                } catch (error) {
                    console.error('Error al cargar los comentarios:', error);
                    comentariosDiv.innerHTML = '<p class="alert alert-danger">Error al cargar los comentarios.</p>';
                }
            }

            // Función delegada para manejar todos los clics dentro de comentariosDiv
            function handleComentariosDivClick(event) {
                // Lógica para el botón 'Responder' (ya existente)
                if (event.target.classList.contains('btn-responder')) {
                    const comentarioId = event.target.dataset.comentarioId;
                    const respuestaForm = document.getElementById(`respuesta-form-${comentarioId}`);
                    if (respuestaForm) {
                        respuestaForm.classList.remove('d-none');
                    }
                }

                // Lógica para el botón 'Cancelar Respuesta' (ya existente)
                if (event.target.classList.contains('btn-cancelar-respuesta')) {
                    const respuestaForm = event.target.closest('div[id^="respuesta-form-"]');
                    if (respuestaForm) {
                        respuestaForm.classList.add('d-none');
                        const mensajeRespuestaDiv = respuestaForm.querySelector('[id^="mensaje-respuesta-"]');
                        if (mensajeRespuestaDiv) {
                            mensajeRespuestaDiv.innerHTML = '';
                        }
                        const textarea = respuestaForm.querySelector('.mensaje-respuesta');
                        if (textarea) {
                            textarea.value = '';
                        }
                    }
                }

                // Lógica para el botón 'Enviar Respuesta'
                if (event.target.classList.contains('btn-enviar-respuesta')) {
                    const padreId = event.target.dataset.padreId;
                    const respuestaForm = event.target.closest('div[id^="respuesta-form-"]');
                    const mensajeTextarea = respuestaForm.querySelector('.mensaje-respuesta');
                    const mensajeRespuestaDiv = respuestaForm.querySelector('[id^="mensaje-respuesta-"]');

                    const mensaje = mensajeTextarea.value.trim();
                    const juegoId = entidadId; // En tu caso, entidadId y juegoId son lo mismo para un juego

                    if (mensaje === "") {
                        mensajeRespuestaDiv.innerHTML = '<div class="alert alert-warning">Por favor, escribe tu respuesta.</div>';
                        return;
                    }

                    const antiForgeryToken = getAntiForgeryToken();
                    if (!antiForgeryToken) {
                        alert('Error de seguridad: No se pudo obtener el token de verificación.');
                        return;
                    }

                    fetch('/Comentario/CrearComentario', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: `tipoEntidad=${tipoEntidad}&entidadId=${entidadId}&mensaje=${encodeURIComponent(mensaje)}&comentarioPadreId=${padreId}&juegoId=${juegoId}`
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.text(); // Devuelve texto, no un partial view en este caso
                        } else {
                            console.error('Error al enviar la respuesta:', response.status, response.statusText);
                            mensajeRespuestaDiv.innerHTML = '<div class="alert alert-danger">Error al enviar la respuesta. Inténtalo de nuevo.</div>';
                            throw new Error('Error al enviar la respuesta.');
                        }
                    })
                    .then(data => {
                        // Después de crear la respuesta, recargar la sección de comentarios
                        cargarComentarios();
                        mensajeTextarea.value = ""; // Limpiar el textarea
                        respuestaForm.classList.add('d-none'); // Ocultar el formulario
                        mensajeRespuestaDiv.innerHTML = '<div class="alert alert-success">Respuesta enviada.</div>';
                        setTimeout(() => {
                            mensajeRespuestaDiv.innerHTML = "";
                        }, 3000);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                }

                // Lógica para el botón 'Eliminar Comentario'
                if (event.target.classList.contains('btn-eliminar-comentario')) {
                    const comentarioId = event.target.dataset.comentarioId;
                    if (confirm('¿Estás seguro de que quieres eliminar este comentario y todas sus respuestas?')) {
                        const antiForgeryToken = getAntiForgeryToken();
                        if (!antiForgeryToken) {
                            alert('Error de seguridad: No se pudo obtener el token de verificación.');
                            return;
                        }

                        fetch('/Comentario/EliminarComentario', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': antiForgeryToken
                            },
                            body: `comentarioId=${comentarioId}`
                        })
                        .then(response => {
                            if (response.ok) {
                                // Si la eliminación fue exitosa, recargar la sección de comentarios
                                cargarComentarios();
                            } else if (response.status === 403) {
                                alert('No tienes permiso para eliminar este comentario.');
                            } else if (response.status === 404) {
                                alert('El comentario que intentas eliminar no fue encontrado.');
                            } else {
                                response.text().then(errorMessage => {
                                    console.error('Error al eliminar el comentario:', response.status, response.statusText, errorMessage);
                                    alert(`Error al eliminar el comentario: ${errorMessage || 'Inténtalo de nuevo.'}`);
                                }).catch(() => {
                                    console.error('Error al eliminar el comentario:', response.status, response.statusText);
                                    alert('Error al eliminar el comentario. Inténtalo de nuevo.');
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error de red o procesamiento:', error);
                            alert('Ocurrió un error inesperado. Por favor, inténtalo de nuevo.');
                        });
                    }
                }

                // Lógica para mostrar/ocultar respuestas (ya existente)
                if (event.target.classList.contains('btn-mostrar-respuestas')) {
                    const comentarioId = event.target.dataset.comentarioId;
                    const respuestasContainer = document.getElementById(`respuestas-de-${comentarioId}`);
                    if (respuestasContainer) {
                        respuestasContainer.classList.toggle('d-none');
                        event.target.textContent = respuestasContainer.classList.contains('d-none')
                            ? `Ver ${respuestasContainer.querySelectorAll('li.media').length} respuestas`
                            : `Ocultar respuestas`;
                    }
                }
            } // Fin de handleComentariosDivClick

            // Función para enviar un nuevo comentario principal
            function enviarComentario() {
                var mensaje = document.getElementById('mensajeNuevoComentario').value;
                var mensajeRespuesta = document.getElementById('mensajeRespuestaComentario');
                var juegoId = entidadId; // EntidadId para el juego

                if (mensaje.trim() === "") {
                    mensajeRespuesta.innerHTML = '<div class="alert alert-warning">Por favor, escribe un comentario.</div>';
                    return;
                }

                const antiForgeryToken = getAntiForgeryToken();
                if (!antiForgeryToken) {
                    alert('Error de seguridad: No se pudo obtener el token de verificación.');
                    return;
                }

                fetch('/Comentario/CrearComentario', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: `tipoEntidad=${tipoEntidad}&entidadId=${entidadId}&mensaje=${encodeURIComponent(mensaje)}&comentarioPadreId=&juegoId=${juegoId}`
                })
                .then(response => {
                    if (response.ok) {
                        return response.text(); // La respuesta ya no es el partial view individual
                    } else {
                        console.error('Error al enviar el comentario:', response.status, response.statusText);
                        mensajeRespuesta.innerHTML = '<div class="alert alert-danger">Error al enviar el comentario. Inténtalo de nuevo.</div>';
                        throw new Error('Error al enviar el comentario.');
                    }
                })
                .then(data => {
                    // Después de crear el comentario, recargar la sección de comentarios
                    cargarComentarios();
                    document.getElementById('mensajeNuevoComentario').value = ""; // Limpiar el textarea
                    mensajeRespuesta.innerHTML = '<div class="alert alert-success">Comentario enviado.</div>';
                    setTimeout(() => {
                        mensajeRespuesta.innerHTML = "";
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }

            // Adjuntar el listener principal de delegación una sola vez al cargar el DOM
            comentariosDiv.addEventListener('click', handleComentariosDivClick);

            // Cargar los comentarios iniciales al cargar la página
            cargarComentarios();
        });
    </script>
}