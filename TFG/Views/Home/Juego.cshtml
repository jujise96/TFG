@model Juego

@{
    ViewData["Title"] = Model.Nombre;
}

<div class="text-center">
    <h1 class="display-4">Bienvenido a @Model.Nombre</h1>
    <p>Consulta la información del juego y accede a sus contenidos.</p>
    @if (User.Identity.IsAuthenticated)
    {
        @if (User.IsInRole("Admin"))
        {
            <form method="post" asp-controller="Home" asp-action="ModificarElemento" asp-route-tipo="Juego" asp-route-idelemento=@Model.Id>
                <button type="submit" class="btn btn-outline-secondary btn-sm">Modificar juego: @Model.Nombre</button>
            </form>
        }
    }
</div>

<div class="container mt-4">
    <h2>Información del Juego</h2>
    <ul class="list-unstyled">
        <li><strong>Nombre:</strong> @Model.Nombre</li>
        <li><strong>IdElem:</strong> @Model.IdElem</li>
        <li><strong>Descripción:</strong> @Model.Descripcion</li>
    </ul>

    <h2>Secciones disponibles</h2>
    <ul class="list-unstyled">
        <li>
            <a asp-controller="Home" asp-action="Misiones" asp-route-id="@Model.Id">Ver Misiones</a>
        </li>
        <li>
            <a asp-controller="Home" asp-action="Items" asp-route-id="@Model.Id">Ver Ítems</a>
        </li>
        <li>
            <a asp-controller="Home" asp-action="Trucos" asp-route-id="@Model.Id">Ver Truco</a>
        </li>
    </ul>
</div>

<div id="seccion-de-comentarios">
    @await Html.PartialAsync("../Comentario/CajaComentarios/_CajaDeComentarios", new TFG.Models.CajaDeComentariosViewModel { TipoEntidad = "Juego", EntidadId = Model.Id })
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var tipoEntidad = "Juego";
            var entidadId = @Model.Id;
            var comentariosDiv = document.getElementById('seccion-de-comentarios');

            fetch(`/Comentario/MostrarComentarios?tipoEntidad=${tipoEntidad}&entidadId=${entidadId}`)
                .then(response => {
                    if (!response.ok) {
                        console.error('Error en la respuesta del servidor:', response.status, response.statusText);
                        comentariosDiv.innerHTML = '<p>Error al cargar los comentarios desde el servidor.</p>';
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(data => {
                    comentariosDiv.innerHTML = data;

                    // Delegación de eventos para los botones dentro de la sección de comentarios
                    comentariosDiv.addEventListener('click', function (event) {
                        if (event.target.classList.contains('btn-responder')) {
                            const comentarioId = event.target.dataset.comentarioId;
                            const respuestaForm = document.getElementById(`respuesta-form-${comentarioId}`);
                            if (respuestaForm) {
                                respuestaForm.classList.remove('d-none');
                            }
                        }

                        if (event.target.classList.contains('btn-cancelar-respuesta')) {
                            const respuestaForm = event.target.closest('div[id^="respuesta-form-"]');
                            if (respuestaForm) {
                                respuestaForm.classList.add('d-none');
                                const mensajeRespuestaDiv = respuestaForm.querySelector('[id^="mensaje-respuesta-"]');
                                if (mensajeRespuestaDiv) {
                                    mensajeRespuestaDiv.innerHTML = '';
                                }
                                const textarea = respuestaForm.querySelector('.mensaje-respuesta');
                                if (textarea) {
                                    textarea.value = '';
                                }
                            }
                        }

                        if (event.target.classList.contains('btn-enviar-respuesta')) {
                            const padreId = event.target.dataset.padreId;
                            const respuestaForm = event.target.closest('div[id^="respuesta-form-"]');
                            const mensajeTextarea = respuestaForm.querySelector('.mensaje-respuesta');
                            const mensajeRespuestaDiv = respuestaForm.querySelector('[id^="mensaje-respuesta-"]');
                            const tipoEntidad = document.getElementById('tipoEntidad').value;
                            const entidadId = document.getElementById('entidadId').value;
                            const mensaje = mensajeTextarea.value.trim();
                            const juegoId = document.getElementById('entidadId').value;

                            if (mensaje === "") {
                                mensajeRespuestaDiv.innerHTML = '<div class="alert alert-warning">Por favor, escribe tu respuesta.</div>';
                                return;
                            }

                            fetch('/Comentario/CrearComentario', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                                },
                                body: `tipoEntidad=${tipoEntidad}&entidadId=${entidadId}&mensaje=${encodeURIComponent(mensaje)}&comentarioPadreId=${padreId}&juegoId=${juegoId}`
                            })
                            .then(response => {
                                if (response.ok) {
                                    return response.text(); // Esperamos el HTML del nuevo comentario
                                } else {
                                    console.error('Error al enviar la respuesta:', response.status, response.statusText);
                                    mensajeRespuestaDiv.innerHTML = '<div class="alert alert-danger">Error al enviar la respuesta. Inténtalo de nuevo.</div>';
                                    throw new Error('Error al enviar la respuesta.');
                                }
                            })
                            .then(data => {
                                // Insertar la nueva respuesta debajo del comentario padre
                                const comentarioPadre = event.target.closest('.media'); // Encontrar el comentario padre
                                const respuestasContainer = comentarioPadre.querySelector('.list-unstyled');
                                if (respuestasContainer) {
                                    const nuevaRespuestaLi = document.createElement('li');
                                    nuevaRespuestaLi.classList.add('media', 'mb-3', 'list-unstyled', 'ml-5'); // Añade clases para el estilo
                                    nuevaRespuestaLi.innerHTML = data;
                                    respuestasContainer.appendChild(nuevaRespuestaLi);
                                } else {
                                    const nuevaListaRespuestas = document.createElement('ul');
                                    nuevaListaRespuestas.classList.add('list-unstyled', 'ml-5');
                                    const nuevaRespuestaLi = document.createElement('li');
                                    nuevaRespuestaLi.classList.add('media', 'mb-3', 'list-unstyled'); // Añade clases para el estilo
                                    nuevaRespuestaLi.innerHTML = data;
                                    nuevaListaRespuestas.appendChild(nuevaRespuestaLi);
                                    comentarioPadre.querySelector('.media-body').appendChild(nuevaListaRespuestas);
                                }

                                // Limpiar el textarea y ocultar el formulario de respuesta
                                const respuestaFormulario = event.target.closest('div[id^="respuesta-form-"]');
                                const mensajeInput = respuestaFormulario.querySelector('.mensaje-respuesta');
                                const mensajeResultado = respuestaFormulario.querySelector('[id^="mensaje-respuesta-"]');
                                mensajeInput.value = "";
                                respuestaFormulario.classList.add('d-none');
                                mensajeResultado.innerHTML = '<div class="alert alert-success">Respuesta enviada.</div>';
                                setTimeout(() => {
                                    mensajeResultado.innerHTML = "";
                                }, 3000);
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                        }

                        if (event.target.classList.contains('btn-mostrar-respuestas')) {
                            const comentarioId = event.target.dataset.comentarioId;
                            const respuestasContainer = document.getElementById(`respuestas-de-${comentarioId}`);
                            if (respuestasContainer) {
                                respuestasContainer.classList.toggle('d-none');
                                event.target.textContent = respuestasContainer.classList.contains('d-none')
                                    ? `Ver ${respuestasContainer.querySelectorAll('li.media').length} respuestas`
                                    : `Ocultar respuestas`;
                            }
                        }
                    });

                    // Adjuntar event listener para el botón de nuevo comentario (si no lo tenías delegado)
                    var enviarBtnNuevoComentario = comentariosDiv.querySelector('#formNuevoComentario button[type="button"]');
                    if (enviarBtnNuevoComentario) {
                        enviarBtnNuevoComentario.addEventListener('click', enviarComentario);
                    } else {
                        console.error('No se encontró el botón de enviar nuevo comentario después de la carga.');
                    }

                    function enviarComentario() {
                        var mensaje = document.getElementById('mensajeNuevoComentario').value;
                        var tipoEntidad = document.getElementById('tipoEntidad').value;
                        var entidadId = document.getElementById('entidadId').value;
                        var mensajeRespuesta = document.getElementById('mensajeRespuestaComentario');
                        var juegoId = document.getElementById('entidadId').value; // Obtén el Id del juego

                        if (mensaje.trim() === "") {
                            mensajeRespuesta.innerHTML = '<div class="alert alert-warning">Por favor, escribe un comentario.</div>';
                            return;
                        }

                        fetch('/Comentario/CrearComentario', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': '@Html.AntiForgeryToken()'
                            },
                            body: `tipoEntidad=${tipoEntidad}&entidadId=${entidadId}&mensaje=${encodeURIComponent(mensaje)}&comentarioPadreId=&juegoId=${juegoId}`
                        })
                        .then(response => {
                            if (response.ok) {
                                return response.text(); // Esperamos el HTML del nuevo comentario
                            } else {
                                console.error('Error al enviar el comentario:', response.status, response.statusText);
                                mensajeRespuesta.innerHTML = '<div class="alert alert-danger">Error al enviar el comentario. Inténtalo de nuevo.</div>';
                                throw new Error('Error al enviar el comentario.');
                            }
                        })
                        .then(data => {
                            // Insertar el nuevo comentario al principio de la lista
                            var comentariosContainer = document.querySelector('.card-body');
                            var nuevoComentarioDiv = document.createElement('li');
                            nuevoComentarioDiv.classList.add('media', 'mb-3', 'list-unstyled'); // Añade clases para el estilo
                            nuevoComentarioDiv.innerHTML = data;
                            comentariosContainer.insertBefore(nuevoComentarioDiv, comentariosContainer.firstChild);

                            // Limpiar el textarea y mostrar un mensaje de éxito
                            document.getElementById('mensajeNuevoComentario').value = "";
                            mensajeRespuesta.innerHTML = '<div class="alert alert-success">Comentario enviado.</div>';
                            setTimeout(() => {
                                mensajeRespuesta.innerHTML = "";
                            }, 3000);
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error de red al cargar los comentarios:', error);
                    comentariosDiv.innerHTML = '<p>Error de red al intentar cargar los comentarios.</p>';
                });
        });
    </script>
}