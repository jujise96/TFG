@model List<ElementoUsuarioViewModel>
@using TFG.Models; @* Asegúrate de que esta directiva 'using' apunte a donde están tus enums! *@

@{
    ViewData["Title"] = "Página de inicio";
    var tipo = ViewBag.tipoelemento as string;
    var idJuego = ViewBag.idJuego;
    if (Model != null && Model.Any())
    {
        idJuego = Model[0].idJuego;
    }
}

<div class="text-center card">
    <h1 class="display-4">Guía de Supervivencia del Yermo</h1>

    <div class="mb-3">
        @if ((tipo == "Mision" || tipo == "Item") && User.Identity.IsAuthenticated)
        {
            @* NUEVO: Desplegable para el filtro de estado (Completado/No Completado/Todos) *@
            <select id="estadoFilter" class="form-select form-select-sm d-inline-block w-auto m-1">
                <option value="todos">Todos los estados</option>
                <option value="true">Completados</option>
                <option value="false">No Completados</option>
            </select>

            <select id="subtipoFilter" class="form-select form-select-sm d-inline-block w-auto m-1">
                <option value="todos">Todos los @tipo</option>
                @if (tipo == "Mision")
                {
                    foreach (var val in Enum.GetValues(typeof(TipoQuest)))
                    {
                        <option value="@((int)val)">@(((TipoQuest)val).ToString())</option>
                    }
                }
                else if (tipo == "Item")
                {
                    foreach (var val in Enum.GetValues(typeof(TipoItem)))
                    {
                        <option value="@((int)val)">@(((TipoItem)val).ToString())</option>
                    }
                }
            </select>

        }
        @if (User.IsInRole("Admin"))
        {
            <form method="post" class="d-inline" asp-controller="Home" asp-action="CrearElemento" asp-route-tipo="@tipo" asp-route-idJuego="@idJuego">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-outline-secondary m-1 btn-sm">Crear nuevo @tipo</button>
            </form>
        }
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="mb-3 d-flex justify-content-center align-items-center">
            <input type="text" id="searchInput" class="form-control w-75" placeholder="Buscar por nombre...">
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover mt-3" id="elementTable">
                <thead>
                    <tr>
                        <th scope="col">Nombre</th>
                        @if (tipo == "Mision" || tipo == "Item")
                        {
                            <th scope="col">Tipo</th>
                        }
                        @if ((tipo == "Mision" || tipo == "Item") && User.Identity.IsAuthenticated)
                        {
                            <th scope="col">Completada</th>
                        }

                        @if (tipo == "Juego")
                        {
                            <th scope="col">Progreso</th>
                        }

                        @if (User.IsInRole("Admin"))
                        {
                            <th scope="col">Acciones</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="elemento-lista" data-completada="@item.completada.ToString().ToLower()" data-subtipo="@item.subtipo">
                            <td>
                                <a asp-controller="Home" asp-action="@tipo" asp-route-id="@item.Id" asp-route-idJuego="@item.idJuego">
                                    @item.Nombre
                                </a>
                            </td>
                            @if (tipo == "Mision")
                            {
                                <td>@(((TipoQuest)item.subtipo).ToString())</td>
                            }
                            else if (tipo == "Item")
                            {
                                <td>@(((TipoItem)item.subtipo).ToString())</td>
                            }

                            @if (tipo == "Juego")
                            {
                                <td>
                                    @if (item.Progreso > 0)
                                    {
                                        <div class="progress mt-2" role="progressbar" aria-label="Example with label" aria-valuenow="@item.Progreso" aria-valuemin="0" aria-valuemax="100">
                                            <div class="progress-bar" style="width: @item.Progreso%">@item.Progreso%</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <p>¡Anímate a empezar una partida!</p>
                                    }
                                </td>
                            }

                            @if ((tipo == "Mision" || tipo == "Item") && User.Identity.IsAuthenticated)
                            {
                                <td>
                                    <input type="checkbox" class="checkbox-completed" id="marcarcompletada_@item.Id" name="seleccionado_@item.Id" @(item.completada ? "checked" : "") />
                                </td>
                            }
                            @if (User.IsInRole("Admin"))
                            {
                                <td>
                                    <form method="post" asp-controller="Home" asp-action="eliminarelemento" class="d-inline" onsubmit="return confirm('¿Estás seguro de que quieres eliminar este @tipo?');">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="tipo" value="@tipo" />
                                        <input type="hidden" name="idelemento" value="@item.Id" />
                                        <input type="hidden" name="idjuego" value="@item.idJuego" />
                                        <button type="submit" class="btn btn-outline-danger btn-sm m-0">Eliminar @tipo</button>
                                    </form>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p>No hay elementos disponibles.</p>
    }
</div>

@section Scripts {
    <script>
        const urlaccion = '@Url.Action("MarcarCompletadaConModelo", "GestionUsuario")';
        const tipo = '@tipo';
        let marcarcompletada = document.querySelectorAll('.checkbox-completed');
        // Se elimina 'filterButtons' ya que los botones de estado se reemplazan por un select
        const listaElementos = document.querySelectorAll('.elemento-lista');
        const searchInput = document.getElementById('searchInput');
        const subtipoFilterSelect = document.getElementById('subtipoFilter');
        const estadoFilterSelect = document.getElementById('estadoFilter'); // NUEVO: Obtener el select de estado

        let estadoActivo = 'todos'; // NUEVO: Variable para el filtro de estado (sustituye a filtroActivo)
        let subtipoActivo = 'todos';

        function aplicarFiltro() {
            const searchTerm = searchInput.value.toLowerCase();

            listaElementos.forEach(item => {
                const completada = item.getAttribute('data-completada');
                const itemSubtipo = item.getAttribute('data-subtipo');
                const itemName = item.querySelector('td:first-child').textContent.toLowerCase();

                const matchesSearch = itemName.includes(searchTerm);
                let matchesCompletionFilter = true; // Renombrada para mayor claridad
                let matchesSubtypeFilter = true;

                // Lógica del filtro de estado (antes 'filtroActivo')
                if (estadoActivo !== 'todos') {
                    matchesCompletionFilter = (completada === estadoActivo);
                }

                // Lógica del filtro por subtipo
                if (subtipoActivo !== 'todos') {
                    matchesSubtypeFilter = (itemSubtipo === subtipoActivo);
                }

                item.style.display = (matchesSearch && matchesCompletionFilter && matchesSubtypeFilter) ? 'table-row' : 'none';
            });
        }

        marcarcompletada.forEach(function (checkbox) {
            checkbox.addEventListener('change', async function () {
                const id = this.id.split('_')[1];
                const completada = this.checked;
                const listItem = this.closest('.elemento-lista');
                if (listItem) {
                    listItem.setAttribute('data-completada', completada.toString());
                }

                const antiForgeryTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                const antiForgeryToken = antiForgeryTokenElement ? antiForgeryTokenElement.value : '';

                const respuesta = await fetch(urlaccion, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiForgeryToken
                    },
                    body: JSON.stringify({
                        id: id,
                        tipo: tipo,
                        completada: completada
                    })
                });
                if (respuesta.ok) {
                    aplicarFiltro();
                } else {
                    alert("Error al marcar el elemento.");
                }
            });
        });

        // Se elimina el bucle para filterButtons, ya que se reemplazan por 'estadoFilterSelect'
        // if (filterButtons.length > 0) { ... }

        // NUEVO: Event listener para el cambio en el desplegable de estado
        if (estadoFilterSelect) {
            estadoFilterSelect.addEventListener('change', function() {
                estadoActivo = this.value;
                aplicarFiltro();
            });
        }

        if (subtipoFilterSelect) {
            subtipoFilterSelect.addEventListener('change', function() {
                subtipoActivo = this.value;
                aplicarFiltro();
            });
        }

        searchInput.addEventListener('keyup', aplicarFiltro);

        aplicarFiltro();
    </script>
}